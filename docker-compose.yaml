version: "3.9"
services:

  orders:
    image: app-orders
    build:
      context: ./orders
      dockerfile: orders/Dockerfile
    ports:
      - 8080:80
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ORDERS_CONNECTION_STRING: "Host=postgres:5432;Username=ordersuser;Password=orders-pwd;Database=orders"

  echo-server:
    image: ealen/echo-server


  postgres: 
    container_name: postgres
    build: ${PWD}/postgres
    environment:
      POSTGRES_USER: ordersuser
      POSTGRES_DB: orders
      POSTGRES_PASSWORD: orders-pwd
    ports:
      - 5432:5432
    volumes:
      - ${PWD}/postgres/:/docker-entrypoint-initdb.d/;
      - ${PWD}/postgres/sample:/tmp/sample
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka-consumer:
    container_name: kafka-consumer
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    command: /usr/bin/kafka-console-consumer --bootstrap-server kafka:9092 --topic orders.public.orders 
  
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: registry
    depends_on:
      - zookeeper
    ports:
      - 8085:8085
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:9092"
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
 
  connect:
    container_name: kafka_connect
    build: ${PWD}/connect
    ports:
    - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: target-connect
      CONNECT_PRODUCER_COMPRESSION_TYPE: lz4
      CONNECT_GROUP_ID: connect
      CONNECT_KEY_CONVERTER:  org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://registry:8085
      CONNECT_VALUE_CONVERTER:  org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://registry:8085
      CONNECT_CONFIG_STORAGE_TOPIC: connect_config
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: connect_offset
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: connect_status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'    
    depends_on: 
      - kafka
      - zookeeper
      - postgres
      - registry
      - elastic

  elastic:
    image: elasticsearch:8.7.1
    container_name: elastic
    ports:
    - 9200:9200
    environment:
      discovery.type: single-node
      xpack.security.enabled: 'false'
      xpack.security.http.ssl.enabled: 'false'
      xpack.security.transport.ssl.enabled: 'false'
    restart: always

  kibana:
    image: kibana:8.7.1
    container_name: kibana
    ports:
    - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: http://elastic:9200      
    depends_on:
      elastic:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  kibana-bootstrap:
    container_name: kibana-bootstrap
    depends_on:
      kibana:
        condition: service_healthy

    image: curlimages/curl:8.1.2    
    command: >- 
      curl 
      --location kibana:5601/api/data_views/data_view
      --header 'kbn-xsrf: false' 
      --header 'Content-Type: application/json' 
      --data '{"data_view": {"title": "orders*","name": "Logs"}}'

  logstash:
    image: logstash:8.7.1
    container_name: logstash
    environment:
      xpack.monitoring.enabled: "false"
      ELASTIC_HOST: http://elastic:9200
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: orders.public.orders
      HTTP_URL: http://echo-server:80
    depends_on:
    - kafka
    - zookeeper
    - elastic
    volumes:
      - ${PWD}/logstash:/usr/share/logstash/pipeline/
  

networks:
  default:
    name: tools-network

     
